// Nice Rhythm
// Fluid vertical rhythm with modular scale. Mobile first.
//
// @cinan
// https://github.com/cinan/nice_rhythm

niceRhythm(
_scaleFactor = 1.333,
_scaleFactorLarge = 1.618, // golden ratio
_baseFontSize = .85rem,
_baseFontSizeLarge = 1rem,
_baseLineHeight = _baseFontSize * 1.25,
_baseLineHeightLarge = _baseFontSizeLarge * 1.25,
_minViewportWidth = 35.5rem,
_maxViewportWidth = 60rem,
_lineHeights = null,
_fontScales = null,
_font = 'font1'
)

  _rulesCollection = {}
  _rulesCollection[_font] = {
    scaleFactor: _scaleFactor,
    scaleFactorLarge: _scaleFactorLarge,
    baseFontSize: _baseFontSize,
    baseFontSizeLarge: _baseFontSizeLarge,
    baseLineHeight: _baseLineHeight,
    baseLineHeightLarge: _baseLineHeightLarge,
    minViewportWidth: _minViewportWidth,
    maxViewportWidth: _maxViewportWidth,
    lineHeights: _lineHeights || {
      'default': {
        '0': _baseLineHeight * 1,
        '1': _baseLineHeight * 1.5,
        '2': _baseLineHeight * 2,
        '3': _baseLineHeight * 2.5
      },
      'large': {
        '0': _baseLineHeightLarge * 1,
        '1': _baseLineHeightLarge * 1.5,
        '2': _baseLineHeightLarge * 2,
        '3': _baseLineHeightLarge * 3
      }
    },
    fontScales: _fontScales || {
      'default': {
        '0': _baseFontSize * (_scaleFactor ** 0),
        '1': _baseFontSize * (_scaleFactor ** 1),
        '2': _baseFontSize * (_scaleFactor ** 2),
        '3': _baseFontSize * (_scaleFactor ** 3)
      },
      'large': {
        '0': _baseFontSizeLarge * (_scaleFactorLarge ** 0),
        '1': _baseFontSizeLarge * (_scaleFactorLarge ** 0.5),
        '2': _baseFontSizeLarge * (_scaleFactorLarge ** 1.5),
        '3': _baseFontSizeLarge * (_scaleFactorLarge ** 2.5)
      }
    }
  }

  unless rulesCollection is defined
    define('rulesCollection', {}, true)

  define('rulesCollection', merge(rulesCollection, _rulesCollection), true)


_fontScale(font, scale = 0, defaultScale = true)
  rulesCollection[font]['fontScales'][defaultScale ? 'default' : 'large']['%s' % scale]

_lineHeight(font, scale = 0, defaultScale = true)
  rulesCollection[font]['lineHeights'][defaultScale ? 'default' : 'large']['%s' % scale]

_stripUnit(num)
  unit(num, '')

rhythm(scale = 0, ignoreFontSize = false, ignoreLineHeight = false, ignoreMargin = false, font = 'font1')
  unless ignoreLineHeight
    customRhythm('line-height', scale, base: 'lineHeight', font: font)

  unless ignoreFontSize
    customRhythm('font-size', scale, base: 'fontSize', font: font)

  unless ignoreMargin
    customRhythm('margin-bottom', scale, font: font)

customRhythm(property = 'margin-bottom', scale = 0, multiple = 1, base = 'baseLineHeight', font = 'font1')
  if base == 'lineHeight'
    heightMin = _lineHeight(font, scale) * multiple
    heightMax = _lineHeight(font, scale, false) * multiple
  else if base == 'fontSize'
    heightMin = _fontScale(font, scale) * multiple
    heightMax = _fontScale(font, scale, false) * multiple
  else
    heightMin = rulesCollection[font]['baseLineHeight'] * multiple
    heightMax = rulesCollection[font]['baseLineHeightLarge'] * multiple

  {property}: heightMin

  minViewportWidth = rulesCollection[font]['minViewportWidth']
  maxViewportWidth = rulesCollection[font]['maxViewportWidth']

  @media screen and (min-width: minViewportWidth)
    {property}: 'calc(%s + %s * ((100vw - %s) / %s))' % (heightMin (_stripUnit(heightMax) - _stripUnit(heightMin)) minViewportWidth (_stripUnit(maxViewportWidth) - _stripUnit(minViewportWidth)))

  @media screen and (min-width: maxViewportWidth)
    {property}: heightMax
